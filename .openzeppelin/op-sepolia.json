{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0xA1354eA26deE36639083f9EC106a52b0B351Bb08",
      "txHash": "0x3a7489783f3fc9bb9c9e8fcb6e2545e942dba12ae6aada5fe4d1df50c0f9d9bf",
      "kind": "transparent"
    },
    {
      "address": "0x5DE0035a215684578bABe97e19B50d35EC120755",
      "txHash": "0x4be2d34f4426c83645c3d4acb7467b391344d52f746f64ec328da22e6edcbf62",
      "kind": "transparent"
    },
    {
      "address": "0xE12FC6CE1859169C73889A5e4Aeb52A1aF615605",
      "txHash": "0xe5a18a2e228dc5b3b23aed3afa7bbfeb5fd7362e3d65c228793efd633809f8ce",
      "kind": "transparent"
    },
    {
      "address": "0x5EDbb8681312bA0e01Fd41C759817194b95ee604",
      "txHash": "0x40fd2506944e5c6fe9258ce48ae25704ee40c2fa9999ce094a30e3a671a5fd5f",
      "kind": "transparent"
    },
    {
      "address": "0x5157f50D2067C85b403aDB2799AaE2c28A633a4b",
      "txHash": "0x90590e41041ff40d0dd5684eed747e4c21939aef5c8a317b7fb14d9dfc88af31",
      "kind": "transparent"
    },
    {
      "address": "0x033cB4c7CC8F034F5B8D4a7Df2b7EA8CE43bDacF",
      "txHash": "0x7e9a96ca15f807645231ac7bbaf2207e8e271c16f1461ca706554fef4185090c",
      "kind": "transparent"
    },
    {
      "address": "0x9B786F6218FFF6d9742f22426cF4bDDC6F8cb9f8",
      "txHash": "0x597a7f581e27dabf2c48bc701593985d97b0c7e76ed9fc4ee54e86cf565a7e49",
      "kind": "transparent"
    },
    {
      "address": "0xE49b412f09B571790cD9F633035EBDc5AD724502",
      "txHash": "0x4df969544105e5529e1a706f47a7fc48e50bae6f7cb6707f567cb7a3f0bdee6f",
      "kind": "transparent"
    },
    {
      "address": "0x6e009702a8b16Dca15Fa145E3906B13E75Dc516e",
      "txHash": "0x377eaa591c63da390214c367d6127d4ad02d2efcd877f7218db524edae0dc7b5",
      "kind": "transparent"
    },
    {
      "address": "0xca6bfa62791d3c7c7ed1a5b320018c1C1dAC89Ee",
      "txHash": "0x746a7211ee6900070321f7c3d6a2057177f3b3f22e5e7051f2d4f4c8d28d2c47",
      "kind": "transparent"
    },
    {
      "address": "0xF171e6Ccb44323955c24BE9000C92a5Df0032Bfd",
      "txHash": "0x23b380ad02f47bdfde3e86657f53ff3cd4a2198b01b9be0972226f02677b0936",
      "kind": "transparent"
    },
    {
      "address": "0xF27c124616A8Fc816cd7ab0F4bbbFFAB35Dd7D47",
      "txHash": "0xb636ab8866f7190f678fe065bc2b5bb1bb06470f7db1711517f36feed865914d",
      "kind": "transparent"
    },
    {
      "address": "0x3661b2b9b21Cf735e4E84C9F00D6f420641f5a35",
      "txHash": "0x0bb9d48fdd637e20ef2c1095a11e39eaba4e1060ceda10bc98cbbc95353b0f5d",
      "kind": "transparent"
    },
    {
      "address": "0x9001f41Fbe63fF09635Fe8Dfc532035BA34348B9",
      "txHash": "0x9fc6881ce9274cef0b17066090085a9bfc9b2ab0994fa1e6429d76907ce99750",
      "kind": "transparent"
    }
  ],
  "impls": {
    "21c79de2ed994ea538a13c642a0ad47c24a7632a9bae04ea84a9d101291a9282": {
      "address": "0x24A4845a86eCb1346cAa4Ee13b5Dfd09A07ABEC2",
      "txHash": "0xc70d9d095319f6b48dc23b0afffe4895985290a3a2d79acb5448c795094b47be",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_struct(InitializableStorage)2595_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Ownable2StepStorage)2502_storage": {
            "label": "struct Ownable2StepUpgradeable.Ownable2StepStorage",
            "members": [
              {
                "label": "_pendingOwner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)2544_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.Ownable2Step": [
            {
              "contract": "Ownable2StepUpgradeable",
              "label": "_pendingOwner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:23",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "6b9f8ba9c7df7ba4677ba09c11646543b6dfe7549bd55cfbe73f83895891ade1": {
      "address": "0xb6F39D9d8aB1007b4ec2dBd0C245A8DA67233949",
      "txHash": "0xd463aa607f4259324f23b67a0c6bd2e2db32d77c79bdf36e9ce7497b83ecb71a",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_struct(InitializableStorage)2595_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Ownable2StepStorage)2502_storage": {
            "label": "struct Ownable2StepUpgradeable.Ownable2StepStorage",
            "members": [
              {
                "label": "_pendingOwner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)2544_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.Ownable2Step": [
            {
              "contract": "Ownable2StepUpgradeable",
              "label": "_pendingOwner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:23",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "33ac44c8379000ec9d19d8ebb7a33d1688288868614498c71a5893567ea20425": {
      "address": "0x8fCf7eB41bC1A247b01627c65f14df07A5afB83F",
      "txHash": "0xb0585ac2ddf32dd3f7778a0a396da35f469d2901d89caf9ba9cd0da59c0dd454",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_struct(InitializableStorage)2595_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Ownable2StepStorage)2502_storage": {
            "label": "struct Ownable2StepUpgradeable.Ownable2StepStorage",
            "members": [
              {
                "label": "_pendingOwner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)2544_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.Ownable2Step": [
            {
              "contract": "Ownable2StepUpgradeable",
              "label": "_pendingOwner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:23",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "8fee3f0fb3d5c2abc0eee389af3b2a31b4a93f8d87c8f26b34770e254d31b69b": {
      "address": "0x4DA513048524E3671527C3B42fBb9EC72bf2F0bb",
      "txHash": "0x1a6e707a7ead608f7422a342adef55fd83ea99cd3c1d6c9529bf6f1d6b94f777",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_struct(InitializableStorage)2595_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Ownable2StepStorage)2502_storage": {
            "label": "struct Ownable2StepUpgradeable.Ownable2StepStorage",
            "members": [
              {
                "label": "_pendingOwner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)2544_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.Ownable2Step": [
            {
              "contract": "Ownable2StepUpgradeable",
              "label": "_pendingOwner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:23",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "992c53be725b2364ff8f74ec20ce21234668453265d33297f88bfdd9f70326f6": {
      "address": "0x9da2DCee8b42e145C708998a7852ae1D8b8EBE5d",
      "txHash": "0x40d6c530c795120fe2f95e67478657f1ccfb7ca3109daa8d8fa8eeed13893a1a",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_struct(SubjectField)143_storage)dyn_storage": {
            "label": "struct INonMerklizedIssuer.SubjectField[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)8_storage": {
            "label": "uint256[8]",
            "numberOfBytes": "256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes_storage": {
            "label": "bytes",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_array(t_struct(SubjectField)143_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct INonMerklizedIssuer.SubjectField[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ClaimItem)3428_storage)": {
            "label": "mapping(uint256 => struct BalanceCredentialIssuer.ClaimItem)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(BalanceCredentialIssuerStorage)3398_storage": {
            "label": "struct BalanceCredentialIssuer.BalanceCredentialIssuerStorage",
            "members": [
              {
                "label": "countOfIssuedClaims",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "userClaims",
                "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "idToClaim",
                "type": "t_mapping(t_uint256,t_struct(ClaimItem)3428_storage)",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "idToCredentialSubject",
                "type": "t_mapping(t_uint256,t_array(t_struct(SubjectField)143_storage)dyn_storage)",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ClaimItem)3428_storage": {
            "label": "struct BalanceCredentialIssuer.ClaimItem",
            "members": [
              {
                "label": "id",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "issuanceDate",
                "type": "t_uint64",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "claim",
                "type": "t_array(t_uint256)8_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "320"
          },
          "t_struct(InitializableStorage)2595_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Ownable2StepStorage)2502_storage": {
            "label": "struct Ownable2StepUpgradeable.Ownable2StepStorage",
            "members": [
              {
                "label": "_pendingOwner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)2544_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(SubjectField)143_storage": {
            "label": "struct INonMerklizedIssuer.SubjectField",
            "members": [
              {
                "label": "key",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "rawValue",
                "type": "t_bytes_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          }
        },
        "namespaces": {
          "erc7201:polygonid.storage.BalanceCredentialIssuer": [
            {
              "contract": "BalanceCredentialIssuer",
              "label": "countOfIssuedClaims",
              "type": "t_uint64",
              "src": "contracts/examples/BalanceCredentialIssuer.sol:23",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "BalanceCredentialIssuer",
              "label": "userClaims",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "src": "contracts/examples/BalanceCredentialIssuer.sol:25",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "BalanceCredentialIssuer",
              "label": "idToClaim",
              "type": "t_mapping(t_uint256,t_struct(ClaimItem)3428_storage)",
              "src": "contracts/examples/BalanceCredentialIssuer.sol:26",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "BalanceCredentialIssuer",
              "label": "idToCredentialSubject",
              "type": "t_mapping(t_uint256,t_array(t_struct(SubjectField)143_storage)dyn_storage)",
              "src": "contracts/examples/BalanceCredentialIssuer.sol:30",
              "offset": 0,
              "slot": "3"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable2Step": [
            {
              "contract": "Ownable2StepUpgradeable",
              "label": "_pendingOwner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:23",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "52f79140422d567960853fd6402c10443dbc77269c4d8e30ce26b9c33a8a74c5": {
      "address": "0x8685057A73ebFd7026Bc0a742771621ee55BBe86",
      "txHash": "0xb1832cfd72e076c58feae4ce4474a84f2f85c13cd7ea00710cfe2e0b74b2724d",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint64)dyn_storage": {
            "label": "uint64[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes_storage": {
            "label": "bytes",
            "numberOfBytes": "32"
          },
          "t_contract(ICircuitValidator)96": {
            "label": "contract ICircuitValidator",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint64,t_struct(Proof)2411_storage))": {
            "label": "mapping(address => mapping(uint64 => struct ZKPVerifierBase.Proof))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_string_memory_ptr,t_uint256)": {
            "label": "mapping(string => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint64,t_struct(Proof)2411_storage)": {
            "label": "mapping(uint64 => struct ZKPVerifierBase.Proof)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint64,t_struct(ZKPRequest)315_storage)": {
            "label": "mapping(uint64 => struct IZKPVerifier.ZKPRequest)",
            "numberOfBytes": "32"
          },
          "t_string_memory_ptr": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)2676_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(ERC20VerifierStorage)3574_storage": {
            "label": "struct ERC20Verifier.ERC20VerifierStorage",
            "members": [
              {
                "label": "idToAddress",
                "type": "t_mapping(t_uint256,t_address)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "addressToId",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "TOKEN_AMOUNT_FOR_AIRDROP_PER_ID",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(InitializableStorage)2595_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Ownable2StepStorage)2502_storage": {
            "label": "struct Ownable2StepUpgradeable.Ownable2StepStorage",
            "members": [
              {
                "label": "_pendingOwner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)2544_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Proof)2411_storage": {
            "label": "struct ZKPVerifierBase.Proof",
            "members": [
              {
                "label": "isVerified",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "storageFields",
                "type": "t_mapping(t_string_memory_ptr,t_uint256)",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "validatorVersion",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "blockNumber",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "blockTimestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(ZKPRequest)315_storage": {
            "label": "struct IZKPVerifier.ZKPRequest",
            "members": [
              {
                "label": "metadata",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "validator",
                "type": "t_contract(ICircuitValidator)96",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "data",
                "type": "t_bytes_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(ZKPVerifierStorage)2428_storage": {
            "label": "struct ZKPVerifierBase.ZKPVerifierStorage",
            "members": [
              {
                "label": "_proofs",
                "type": "t_mapping(t_address,t_mapping(t_uint64,t_struct(Proof)2411_storage))",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_requests",
                "type": "t_mapping(t_uint64,t_struct(ZKPRequest)315_storage)",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_requestIds",
                "type": "t_array(t_uint64)dyn_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          }
        },
        "namespaces": {
          "erc7201:polygonid.storage.ERC20Verifier": [
            {
              "contract": "ERC20Verifier",
              "label": "idToAddress",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/examples/ERC20Verifier.sol:15",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Verifier",
              "label": "addressToId",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/examples/ERC20Verifier.sol:16",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Verifier",
              "label": "TOKEN_AMOUNT_FOR_AIRDROP_PER_ID",
              "type": "t_uint256",
              "src": "contracts/examples/ERC20Verifier.sol:17",
              "offset": 0,
              "slot": "2"
            }
          ],
          "erc7201:iden3.storage.ZKPVerifier": [
            {
              "contract": "ZKPVerifierBase",
              "label": "_proofs",
              "type": "t_mapping(t_address,t_mapping(t_uint64,t_struct(Proof)2411_storage))",
              "src": "@iden3/contracts/verifiers/ZKPVerifierBase.sol:21",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ZKPVerifierBase",
              "label": "_requests",
              "type": "t_mapping(t_uint64,t_struct(ZKPRequest)315_storage)",
              "src": "@iden3/contracts/verifiers/ZKPVerifierBase.sol:22",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ZKPVerifierBase",
              "label": "_requestIds",
              "type": "t_array(t_uint64)dyn_storage",
              "src": "@iden3/contracts/verifiers/ZKPVerifierBase.sol:23",
              "offset": 0,
              "slot": "2"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable2Step": [
            {
              "contract": "Ownable2StepUpgradeable",
              "label": "_pendingOwner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:23",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "9318b87b53f96217298887af7ac649e8935f5a6c6b0c3f2855d6170e5baf48ee": {
      "address": "0x2Bebe014D21f1a643322df0da61717aC3B99ce36",
      "txHash": "0x884ee4f19ef1995488f21481ec837c582657d2322023c0930908a6f86abd015b",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint64)dyn_storage": {
            "label": "uint64[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes_storage": {
            "label": "bytes",
            "numberOfBytes": "32"
          },
          "t_contract(ICircuitValidator)96": {
            "label": "contract ICircuitValidator",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint64,t_struct(Proof)1805_storage))": {
            "label": "mapping(address => mapping(uint64 => struct ZKPVerifierBase.Proof))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_string_memory_ptr,t_uint256)": {
            "label": "mapping(string => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint64,t_struct(Proof)1805_storage)": {
            "label": "mapping(uint64 => struct ZKPVerifierBase.Proof)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint64,t_struct(ZKPRequest)258_storage)": {
            "label": "mapping(uint64 => struct IZKPVerifier.ZKPRequest)",
            "numberOfBytes": "32"
          },
          "t_string_memory_ptr": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(ERC20SelectiveDisclosureVerifierStorage)2317_storage": {
            "label": "struct ERC20SelectiveDisclosureVerifier.ERC20SelectiveDisclosureVerifierStorage",
            "members": [
              {
                "label": "idToAddress",
                "type": "t_mapping(t_uint256,t_address)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "addressToId",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_idToOperatorOutput",
                "type": "t_mapping(t_uint256,t_uint256)",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "TOKEN_AMOUNT_FOR_AIRDROP_PER_ID",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ERC20Storage)2070_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)1989_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Ownable2StepStorage)1896_storage": {
            "label": "struct Ownable2StepUpgradeable.Ownable2StepStorage",
            "members": [
              {
                "label": "_pendingOwner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)1938_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Proof)1805_storage": {
            "label": "struct ZKPVerifierBase.Proof",
            "members": [
              {
                "label": "isVerified",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "storageFields",
                "type": "t_mapping(t_string_memory_ptr,t_uint256)",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "validatorVersion",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "blockNumber",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "blockTimestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(ZKPRequest)258_storage": {
            "label": "struct IZKPVerifier.ZKPRequest",
            "members": [
              {
                "label": "metadata",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "validator",
                "type": "t_contract(ICircuitValidator)96",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "data",
                "type": "t_bytes_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(ZKPVerifierStorage)1822_storage": {
            "label": "struct ZKPVerifierBase.ZKPVerifierStorage",
            "members": [
              {
                "label": "_proofs",
                "type": "t_mapping(t_address,t_mapping(t_uint64,t_struct(Proof)1805_storage))",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_requests",
                "type": "t_mapping(t_uint64,t_struct(ZKPRequest)258_storage)",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_requestIds",
                "type": "t_array(t_uint64)dyn_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          }
        },
        "namespaces": {
          "erc7201:polygonid.storage.ERC20SelectiveDisclosureVerifier": [
            {
              "contract": "ERC20SelectiveDisclosureVerifier",
              "label": "idToAddress",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/examples/ERC20SelectiveDisclosureVerifier.sol:14",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20SelectiveDisclosureVerifier",
              "label": "addressToId",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/examples/ERC20SelectiveDisclosureVerifier.sol:15",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20SelectiveDisclosureVerifier",
              "label": "_idToOperatorOutput",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/examples/ERC20SelectiveDisclosureVerifier.sol:16",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20SelectiveDisclosureVerifier",
              "label": "TOKEN_AMOUNT_FOR_AIRDROP_PER_ID",
              "type": "t_uint256",
              "src": "contracts/examples/ERC20SelectiveDisclosureVerifier.sol:17",
              "offset": 0,
              "slot": "3"
            }
          ],
          "erc7201:iden3.storage.ZKPVerifier": [
            {
              "contract": "ZKPVerifierBase",
              "label": "_proofs",
              "type": "t_mapping(t_address,t_mapping(t_uint64,t_struct(Proof)1805_storage))",
              "src": "@iden3/contracts/verifiers/ZKPVerifierBase.sol:21",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ZKPVerifierBase",
              "label": "_requests",
              "type": "t_mapping(t_uint64,t_struct(ZKPRequest)258_storage)",
              "src": "@iden3/contracts/verifiers/ZKPVerifierBase.sol:22",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ZKPVerifierBase",
              "label": "_requestIds",
              "type": "t_array(t_uint64)dyn_storage",
              "src": "@iden3/contracts/verifiers/ZKPVerifierBase.sol:23",
              "offset": 0,
              "slot": "2"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable2Step": [
            {
              "contract": "Ownable2StepUpgradeable",
              "label": "_pendingOwner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:23",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "d9287027a53ee22f92f6ee29e86bbce73e2520e139b87eb767f03f402bd812a9": {
      "address": "0x070677ab7e663F8a9eAA047cE40C71324791E8B5",
      "txHash": "0x307d2ec5fd672de5619e158f7bac0b83bdc267b8f92fbfcb1b9ed702eb79311f",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint64)dyn_storage": {
            "label": "uint64[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes_storage": {
            "label": "bytes",
            "numberOfBytes": "32"
          },
          "t_contract(ICircuitValidator)96": {
            "label": "contract ICircuitValidator",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint64,t_struct(Proof)2411_storage))": {
            "label": "mapping(address => mapping(uint64 => struct ZKPVerifierBase.Proof))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_string_memory_ptr,t_uint256)": {
            "label": "mapping(string => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint64,t_struct(Proof)2411_storage)": {
            "label": "mapping(uint64 => struct ZKPVerifierBase.Proof)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint64,t_struct(ZKPRequest)315_storage)": {
            "label": "mapping(uint64 => struct IZKPVerifier.ZKPRequest)",
            "numberOfBytes": "32"
          },
          "t_string_memory_ptr": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)2676_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(ERC20VerifierStorage)3538_storage": {
            "label": "struct ERC20Verifier.ERC20VerifierStorage",
            "members": [
              {
                "label": "idToAddress",
                "type": "t_mapping(t_uint256,t_address)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "addressToId",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "TOKEN_AMOUNT_FOR_AIRDROP_PER_ID",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(InitializableStorage)2595_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Ownable2StepStorage)2502_storage": {
            "label": "struct Ownable2StepUpgradeable.Ownable2StepStorage",
            "members": [
              {
                "label": "_pendingOwner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)2544_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Proof)2411_storage": {
            "label": "struct ZKPVerifierBase.Proof",
            "members": [
              {
                "label": "isVerified",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "storageFields",
                "type": "t_mapping(t_string_memory_ptr,t_uint256)",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "validatorVersion",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "blockNumber",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "blockTimestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(ZKPRequest)315_storage": {
            "label": "struct IZKPVerifier.ZKPRequest",
            "members": [
              {
                "label": "metadata",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "validator",
                "type": "t_contract(ICircuitValidator)96",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "data",
                "type": "t_bytes_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(ZKPVerifierStorage)2428_storage": {
            "label": "struct ZKPVerifierBase.ZKPVerifierStorage",
            "members": [
              {
                "label": "_proofs",
                "type": "t_mapping(t_address,t_mapping(t_uint64,t_struct(Proof)2411_storage))",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_requests",
                "type": "t_mapping(t_uint64,t_struct(ZKPRequest)315_storage)",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_requestIds",
                "type": "t_array(t_uint64)dyn_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          }
        },
        "namespaces": {
          "erc7201:polygonid.storage.ERC20Verifier": [
            {
              "contract": "ERC20Verifier",
              "label": "idToAddress",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/examples/ERC20Verifier.sol:16",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Verifier",
              "label": "addressToId",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/examples/ERC20Verifier.sol:17",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Verifier",
              "label": "TOKEN_AMOUNT_FOR_AIRDROP_PER_ID",
              "type": "t_uint256",
              "src": "contracts/examples/ERC20Verifier.sol:18",
              "offset": 0,
              "slot": "2"
            }
          ],
          "erc7201:iden3.storage.ZKPVerifier": [
            {
              "contract": "ZKPVerifierBase",
              "label": "_proofs",
              "type": "t_mapping(t_address,t_mapping(t_uint64,t_struct(Proof)2411_storage))",
              "src": "@iden3/contracts/verifiers/ZKPVerifierBase.sol:21",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ZKPVerifierBase",
              "label": "_requests",
              "type": "t_mapping(t_uint64,t_struct(ZKPRequest)315_storage)",
              "src": "@iden3/contracts/verifiers/ZKPVerifierBase.sol:22",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ZKPVerifierBase",
              "label": "_requestIds",
              "type": "t_array(t_uint64)dyn_storage",
              "src": "@iden3/contracts/verifiers/ZKPVerifierBase.sol:23",
              "offset": 0,
              "slot": "2"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable2Step": [
            {
              "contract": "Ownable2StepUpgradeable",
              "label": "_pendingOwner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:23",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "3e509c326178df6956d810387870f2b66dcb9c658b5d1a3ad8c20397fe72bddb": {
      "address": "0xb0a3B3c7D4841AC625Bc811530EB540d9C562673",
      "txHash": "0x9b31adf39be35e75d2a4ffbe4d9a6a221537ee5ed2ff8b41d7c7e28cdd0bd115",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint64)dyn_storage": {
            "label": "uint64[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes_storage": {
            "label": "bytes",
            "numberOfBytes": "32"
          },
          "t_contract(ICircuitValidator)15": {
            "label": "contract ICircuitValidator",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint64,t_struct(Proof)192_storage))": {
            "label": "mapping(address => mapping(uint64 => struct ZKPVerifierBase.Proof))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_string_memory_ptr,t_uint256)": {
            "label": "mapping(string => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint64,t_struct(Proof)192_storage)": {
            "label": "mapping(uint64 => struct ZKPVerifierBase.Proof)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint64,t_struct(ZKPRequest)27_storage)": {
            "label": "mapping(uint64 => struct IZKPVerifier.ZKPRequest)",
            "numberOfBytes": "32"
          },
          "t_string_memory_ptr": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(ERC20SelectiveDisclosureVerifierStorage)687_storage": {
            "label": "struct ERC20SelectiveDisclosureVerifier.ERC20SelectiveDisclosureVerifierStorage",
            "members": [
              {
                "label": "idToAddress",
                "type": "t_mapping(t_uint256,t_address)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "addressToId",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_idToOperatorOutput",
                "type": "t_mapping(t_uint256,t_uint256)",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "TOKEN_AMOUNT_FOR_AIRDROP_PER_ID",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ERC20Storage)457_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)376_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Ownable2StepStorage)283_storage": {
            "label": "struct Ownable2StepUpgradeable.Ownable2StepStorage",
            "members": [
              {
                "label": "_pendingOwner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)325_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Proof)192_storage": {
            "label": "struct ZKPVerifierBase.Proof",
            "members": [
              {
                "label": "isVerified",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "storageFields",
                "type": "t_mapping(t_string_memory_ptr,t_uint256)",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "validatorVersion",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "blockNumber",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "blockTimestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(ZKPRequest)27_storage": {
            "label": "struct IZKPVerifier.ZKPRequest",
            "members": [
              {
                "label": "metadata",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "validator",
                "type": "t_contract(ICircuitValidator)15",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "data",
                "type": "t_bytes_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(ZKPVerifierStorage)209_storage": {
            "label": "struct ZKPVerifierBase.ZKPVerifierStorage",
            "members": [
              {
                "label": "_proofs",
                "type": "t_mapping(t_address,t_mapping(t_uint64,t_struct(Proof)192_storage))",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_requests",
                "type": "t_mapping(t_uint64,t_struct(ZKPRequest)27_storage)",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_requestIds",
                "type": "t_array(t_uint64)dyn_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          }
        },
        "namespaces": {
          "erc7201:polygonid.storage.ERC20SelectiveDisclosureVerifier": [
            {
              "contract": "ERC20SelectiveDisclosureVerifier",
              "label": "idToAddress",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/examples/ERC20SelectiveDisclosureVerifier.sol:16",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20SelectiveDisclosureVerifier",
              "label": "addressToId",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/examples/ERC20SelectiveDisclosureVerifier.sol:17",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20SelectiveDisclosureVerifier",
              "label": "_idToOperatorOutput",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/examples/ERC20SelectiveDisclosureVerifier.sol:18",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20SelectiveDisclosureVerifier",
              "label": "TOKEN_AMOUNT_FOR_AIRDROP_PER_ID",
              "type": "t_uint256",
              "src": "contracts/examples/ERC20SelectiveDisclosureVerifier.sol:19",
              "offset": 0,
              "slot": "3"
            }
          ],
          "erc7201:iden3.storage.ZKPVerifier": [
            {
              "contract": "ZKPVerifierBase",
              "label": "_proofs",
              "type": "t_mapping(t_address,t_mapping(t_uint64,t_struct(Proof)192_storage))",
              "src": "@iden3/contracts/verifiers/ZKPVerifierBase.sol:21",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ZKPVerifierBase",
              "label": "_requests",
              "type": "t_mapping(t_uint64,t_struct(ZKPRequest)27_storage)",
              "src": "@iden3/contracts/verifiers/ZKPVerifierBase.sol:22",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ZKPVerifierBase",
              "label": "_requestIds",
              "type": "t_array(t_uint64)dyn_storage",
              "src": "@iden3/contracts/verifiers/ZKPVerifierBase.sol:23",
              "offset": 0,
              "slot": "2"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable2Step": [
            {
              "contract": "Ownable2StepUpgradeable",
              "label": "_pendingOwner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:23",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "4338e826889abe242710d5f924f5693a92111f115591060a7f1e8dd066fa27af": {
      "address": "0xf14Ae690067B03d473076c5B9c81a0ed865AE4FC",
      "txHash": "0x2bdf9a21d8714a3be3dc494499eb4ef7f77fd77517271b0788b3d9aabeceb568",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint64)dyn_storage": {
            "label": "uint64[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes_storage": {
            "label": "bytes",
            "numberOfBytes": "32"
          },
          "t_contract(ICircuitValidator)15": {
            "label": "contract ICircuitValidator",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint64,t_struct(Proof)192_storage))": {
            "label": "mapping(address => mapping(uint64 => struct ZKPVerifierBase.Proof))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_string_memory_ptr,t_uint256)": {
            "label": "mapping(string => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint64,t_struct(Proof)192_storage)": {
            "label": "mapping(uint64 => struct ZKPVerifierBase.Proof)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint64,t_struct(ZKPRequest)27_storage)": {
            "label": "mapping(uint64 => struct IZKPVerifier.ZKPRequest)",
            "numberOfBytes": "32"
          },
          "t_string_memory_ptr": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(ERC20SelectiveDisclosureVerifierStorage)1047_storage": {
            "label": "struct ERC20SelectiveDisclosureVerifier.ERC20SelectiveDisclosureVerifierStorage",
            "members": [
              {
                "label": "idToAddress",
                "type": "t_mapping(t_uint256,t_address)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "addressToId",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_idToOperatorOutput",
                "type": "t_mapping(t_uint256,t_uint256)",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "TOKEN_AMOUNT_FOR_AIRDROP_PER_ID",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ERC20Storage)457_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)376_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Ownable2StepStorage)283_storage": {
            "label": "struct Ownable2StepUpgradeable.Ownable2StepStorage",
            "members": [
              {
                "label": "_pendingOwner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)325_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Proof)192_storage": {
            "label": "struct ZKPVerifierBase.Proof",
            "members": [
              {
                "label": "isVerified",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "storageFields",
                "type": "t_mapping(t_string_memory_ptr,t_uint256)",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "validatorVersion",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "blockNumber",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "blockTimestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(ZKPRequest)27_storage": {
            "label": "struct IZKPVerifier.ZKPRequest",
            "members": [
              {
                "label": "metadata",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "validator",
                "type": "t_contract(ICircuitValidator)15",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "data",
                "type": "t_bytes_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(ZKPVerifierStorage)209_storage": {
            "label": "struct ZKPVerifierBase.ZKPVerifierStorage",
            "members": [
              {
                "label": "_proofs",
                "type": "t_mapping(t_address,t_mapping(t_uint64,t_struct(Proof)192_storage))",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_requests",
                "type": "t_mapping(t_uint64,t_struct(ZKPRequest)27_storage)",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_requestIds",
                "type": "t_array(t_uint64)dyn_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          }
        },
        "namespaces": {
          "erc7201:opid.storage.ERC20SelectiveDisclosureVerifier": [
            {
              "contract": "ERC20SelectiveDisclosureVerifier",
              "label": "idToAddress",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/examples/ERC20SelectiveDisclosureVerifier.sol:14",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20SelectiveDisclosureVerifier",
              "label": "addressToId",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/examples/ERC20SelectiveDisclosureVerifier.sol:15",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20SelectiveDisclosureVerifier",
              "label": "_idToOperatorOutput",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/examples/ERC20SelectiveDisclosureVerifier.sol:16",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20SelectiveDisclosureVerifier",
              "label": "TOKEN_AMOUNT_FOR_AIRDROP_PER_ID",
              "type": "t_uint256",
              "src": "contracts/examples/ERC20SelectiveDisclosureVerifier.sol:17",
              "offset": 0,
              "slot": "3"
            }
          ],
          "erc7201:iden3.storage.ZKPVerifier": [
            {
              "contract": "ZKPVerifierBase",
              "label": "_proofs",
              "type": "t_mapping(t_address,t_mapping(t_uint64,t_struct(Proof)192_storage))",
              "src": "@iden3/contracts/verifiers/ZKPVerifierBase.sol:21",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ZKPVerifierBase",
              "label": "_requests",
              "type": "t_mapping(t_uint64,t_struct(ZKPRequest)27_storage)",
              "src": "@iden3/contracts/verifiers/ZKPVerifierBase.sol:22",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ZKPVerifierBase",
              "label": "_requestIds",
              "type": "t_array(t_uint64)dyn_storage",
              "src": "@iden3/contracts/verifiers/ZKPVerifierBase.sol:23",
              "offset": 0,
              "slot": "2"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable2Step": [
            {
              "contract": "Ownable2StepUpgradeable",
              "label": "_pendingOwner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:23",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    }
  }
}
